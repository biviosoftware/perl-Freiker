# Copyright (c) 2006-2010 bivio Software, Inc.  All Rights Reserved.
# $Id$
my($today, $child_id, $school_id) = do('./RideList.PL');
my($_D) = class('Type.Date');
my($_RT) = b_use('Type.RideType');
my($day) = [map($_D->add_days($today, -$_), 0..10)];
my($fc) = sub {
    return class('Freiker::Test')->FREIKER_CODE(shift);
};
my($epc) = sub {
    return class('Freiker::Test')->EPC(shift);
};
my($count) = sub {
    return req()->with_realm(
	$child_id,
	sub {scalar(@{model('Ride')->map_iterate(sub {1}, 'ride_date')})},
    );
};
my($add_rides) = sub {
    my($kid, @days) = @_;
    req()->with_realm($school_id, sub {
	my($rif) = model('RideImportForm');
	foreach my $d (@days) {
            $rif->process_record({
 	        epc => $epc->($kid),
	        datetime => $day->[$d],
	    });
	}
    });
    return;
};
my($num_rides) = $count->();
my($other) = {
    'User.gender' => Freiker::Test->DEFAULT_GENDER,
    birth_year => Freiker::Test->DEFAULT_BIRTH_YEAR,
    'User.first_name' => unauth_model('User', {user_id => $child_id})
	->get('first_name'),
};
[
    empty_case({
	'FreikerCode.freiker_code' => undef,
	'Club.club_id' => $school_id,
	'Address.zip' => Freiker::Test->ZIP,
	miles => Freiker::Test->DEFAULT_MILES,
	kilometers => Freiker::Test->DEFAULT_KILOMETERS,
	default_ride_type => $_RT->WALK,
    }),
    [{
	%$other,
	'FreikerCode.freiker_code' => $fc->(3),
	'Club.club_id' => $school_id,
	miles => '1.5',
	'Address.zip' => Freiker::Test->ZIP,
	default_ride_type => $_RT->BUS,
    }] => [{
	'Model.FreikerCodeForm' => {
	    'FreikerCode.freiker_code' => sub {
		assert_equals($num_rides + 1, $count->());
		return $fc->(3),
	    },
	    miles => '1.5',
	    'Address.zip' => Freiker::Test->ZIP,
	},
	'Model.Address' => {
	    zip => Freiker::Test->ZIP,
	},
	'Model.FreikerInfo' => {
	    distance_kilometers => '2.4',
	},
	'Model.RowTag' => {
	    primary_id => $child_id,
	    key => $_RT->ROW_TAG_KEY,
	    value => $_RT->BUS->as_sql_param,
	},
    }],
    empty_case({
	'FreikerCode.freiker_code' => undef,
	'Club.club_id' => $school_id,
	'Address.zip' => Freiker::Test->ZIP,
	kilometers => '2.4',
	miles => '1.5',
	default_ride_type => $_RT->BUS,
    }),
    error_case({
	%$other,
	'FreikerCode.freiker_code' => $fc->(0),
	'Club.club_id' => $school_id,
	miles => 1.5,
	'Address.zip' => Freiker::Test->ZIP,
	default_ride_type => $_RT->BUS,
    } => {
	'FreikerCode.freiker_code' => 'EXISTS',
    }),
    inline_case(sub {
        $add_rides->(1, 4..5);
	$add_rides->(4, 4..5);
	return;
    }),
    error_case({
	%$other,
	'FreikerCode.freiker_code' => $fc->(4),
	'Club.club_id' => $school_id,
	super_user_override => 1,
	miles => 1.5,
	'Address.zip' => Freiker::Test->ZIP,
	default_ride_type => $_RT->BUS,
    } => {
	'FreikerCode.freiker_code'
	    => 'MUTUALLY_EXCLUSIVE: '
	    . join(', ', map($_D->to_string($day->[$_]), reverse(4..5))),
    }),
    inline_case(sub {
        $add_rides->(1, 4..5);
	$add_rides->(4, 4..5);
	req()->set_user('adm');
	model(AdmSubstituteUserForm => {login => 'parent'});
	return;
    }),
    [{
	%$other,
	'FreikerCode.freiker_code' => $fc->(4),
	'Club.club_id' => $school_id,
	super_user_override => 1,
	miles => 1.5,
	'Address.zip' => Freiker::Test->ZIP,
	default_ride_type => $_RT->BUS,
    }] => sub {
	assert_equals($num_rides + 2, $count->());
	class('Action.UserLogout')->execute(req());
	req()->set_realm_and_user(qw(parent parent));
	return 1;
    },
    inline_rollback(),
    inline_case(sub {
        $add_rides->(1, 4);
	$add_rides->(4, 4);
	return;
    }),
    [{
	%$other,
	'FreikerCode.freiker_code' => $fc->(4),
	'Club.club_id' => $school_id,
	miles => 1.5,
	'Address.zip' => Freiker::Test->ZIP,
	default_ride_type => $_RT->BUS,
    }] => sub {
	assert_equals($num_rides + 1, $count->());
	return 1;
    },
    error_case({
	%$other,
	'FreikerCode.freiker_code' => $fc->(0),
	'Club.club_id' => $school_id,
	super_user_override => 1,
	miles => 1.5,
	'Address.zip' => Freiker::Test->ZIP,
	default_ride_type => $_RT->BUS,
    } => {
	'FreikerCode.freiker_code' => 'EXISTS',
    }),
    inline_case(sub {
	req()->set_user('adm');
	model(AdmSubstituteUserForm => {login => 'parent'});
	return;
    }),
    error_case({
	%$other,
	'FreikerCode.freiker_code' => $fc->(0),
	'Club.club_id' => $school_id,
	miles => 1.5,
	'Address.zip' => Freiker::Test->ZIP,
	default_ride_type => $_RT->BUS,
    } => {
	'FreikerCode.freiker_code' => 'EXISTS',
    }),
    inline_case(sub {
	unauth_model(Ride => {
	    user_id => $child_id,
	    ride_date => $day->[2],
	})->update({
	    ride_upload_id => undef,
	});
	return;
    }),
    [{
	%$other,
	'FreikerCode.freiker_code' => $fc->(0),
	'Club.club_id' => $school_id,
	super_user_override => 1,
	miles => 1.5,
	'Address.zip' => Freiker::Test->ZIP,
	default_ride_type => $_RT->BUS,
    }] => sub {
	assert_equals(100, $count->());
	return 1;
    },
];

