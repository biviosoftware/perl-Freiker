# Copyright (c) 2012 bivio Software, Inc.  All Rights Reserved.
# $Id: 
my($child_id);
FormModel({
    setup_request => sub {
	model('ManualRideList' => {
	    parent_id => $child_id,
	});
    },
    check_return => sub {
	my($case, $actual, $expect) = @_;
	map({
	    unauth_model('Ride', $_);
	} @$expect);
	return 1;
    },
});
req()->set_realm_and_user(qw(parent parent));
my($fcl) = model('FreikerList')->load_all;
$child_id = $fcl->find_row_by({
    'RealmOwner.display_name' => 'child',
})->get('RealmUser.user_id');
my($child_id2) = $fcl->find_row_by({
    'RealmOwner.display_name' => 'child1',
})->get('RealmUser.user_id');
model('Ride')->create({
    user_id => $child_id2,
    club_id => RealmUser()->club_id_for_freiker($child_id2),
    ride_date => Date('1/10/2012'),
    ride_type => RideType('BUS'),
});
DateTime()->set_test_now(DateTime('2/1/2012 0:0:0'));
[
    [{
	'use_type_for_all_0' => 1,
	'Ride.ride_date_0' => Date('1/3/2012'),
	'Ride.ride_type_0' => RideType('BUS')->as_sql_param,
	'Ride.ride_date_1' => Date('1/4/2012'),
	'Ride.ride_type_1' => RideType('WALK')->as_sql_param,
	'Ride.ride_type_2' => RideType('WALK')->as_sql_param,
	empty_row_count => 7,
    }] => [{
	user_id => $child_id,
	ride_date => Date('1/3/2012'),
	ride_type => RideType('BUS'),
    }, {
	user_id => $child_id,
	ride_date => Date('1/4/2012'),
	ride_type => RideType('BUS'),
    }],
    [{
	'Ride.ride_date_0' => Date('1/5/2012'),
	'Ride.ride_type_0' => RideType('BUS')->as_sql_param,
	'Ride.ride_date_1' => Date('1/6/2012'),
	'Ride.ride_type_1' => RideType('WALK')->as_sql_param,
	empty_row_count => 8,
    }] => [{
	user_id => $child_id,
	ride_date => Date('1/5/2012'),
	ride_type => RideType('BUS'),
    }, {
	user_id => $child_id,
	ride_date => Date('1/6/2012'),
	ride_type => RideType('WALK'),
    }],
    [{
	'Ride.ride_date_0' => Date('1/9/2012'),
	'Ride.ride_type_0' => RideType('BIKE')->as_sql_param,
	'sibling0' => 1,
	empty_row_count => 9,
    }] => [{
	user_id => $child_id,
	ride_date => Date('1/9/2012'),
	ride_type => RideType('BIKE'),
    }, {
	user_id => $child_id2,
	ride_date => Date('1/9/2012'),
	ride_type => RideType('BIKE'),
    }],
    # ManualRideListForm doesn't complain about or overwrite
    # existing rides for siblings
    [{
	'Ride.ride_date_0' => Date('1/10/2012'),
	'Ride.ride_type_0' => RideType('BIKE')->as_sql_param,
	'Ride.ride_date_1' => Date('1/11/2012'),
	'Ride.ride_type_1' => RideType('BIKE')->as_sql_param,
	'sibling0' => 1,
	empty_row_count => 8,
    }] => [{
	user_id => $child_id2,
	ride_date => Date('1/10/2012'),
	ride_type => RideType('BUS'),
    }, {
	user_id => $child_id2,
	ride_date => Date('1/11/2012'),
	ride_type => RideType('BIKE'),
    }],
    inline_case(sub {
        req()->set_realm_and_user(qw(bunit123456789 adm));
    }),
    [{
	'Ride.ride_date_0' => Date('1/12/2012'),
	'Ride.ride_type_0' => RideType('BIKE')->as_sql_param,
	'sibling0' => 1,
	empty_row_count => 9,
    }] => DIE(),
];
