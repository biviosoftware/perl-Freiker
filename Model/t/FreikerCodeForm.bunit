# Copyright (c) 2006-2009 bivio Software, Inc.  All Rights Reserved.
# $Id$
my($today, $child_id, $school_id) = do('./RideList.PL');
my($_D) = class('Type.Date');
my($day) = [map($_D->add_days($today, -$_), 0..10)];
my($num_rides) = _count();
sub _fc {
    return class('Freiker::Test')->FREIKER_CODE(shift);
}
sub _epc {
    return class('Freiker::Test')->EPC(shift);
}
sub _count {
    return req()->with_realm(
	$child_id,
	sub {scalar(@{model('Ride')->map_iterate(sub {1}, 'ride_date')})},
    );
}
sub _add_rides {
    my($kid, @days) = @_;
    req()->with_realm($school_id, sub {
	my($rif) = model('RideImportForm');
	foreach my $d (@days) {
            $rif->process_record({
 	        epc => _epc($kid),
	        datetime => $day->[$d],
	    });
	}
    });
    return;
}
[
    empty_case({
	'FreikerCode.freiker_code' => undef,
	'Club.club_id' => $school_id,
    }),
    [{
	'FreikerCode.freiker_code' => _fc(3),
	'Club.club_id' => $school_id,
    }] => sub {
	assert_equals($num_rides + 1, _count());
	return 1;
    },
    error_case({
	'FreikerCode.freiker_code' => _fc(0),
	'Club.club_id' => $school_id,
    } => {
	'FreikerCode.freiker_code' => 'EXISTS',
    }),
    inline_case(sub {
        _add_rides(1, 4..5);
	_add_rides(4, 4..5);
	return;
    }),
    error_case({
	'FreikerCode.freiker_code' => _fc(4),
	'Club.club_id' => $school_id,
	super_user_override => 1,
    } => {
	'FreikerCode.freiker_code'
	    => 'MUTUALLY_EXCLUSIVE: '
	    . join(', ', map($_D->to_string($day->[$_]), reverse(4..5))),
    }),
    inline_case(sub {
        _add_rides(1, 4..5);
	_add_rides(4, 4..5);
	req()->set_user('adm');
	model(AdmSubstituteUserForm => {login => 'parent'});
	return;
    }),
    [{
	'FreikerCode.freiker_code' => _fc(4),
	'Club.club_id' => $school_id,
	super_user_override => 1,
    }] => sub {
	assert_equals($num_rides + 2, _count());
	class('Action.UserLogout')->execute(req());
	req()->set_realm_and_user(qw(parent parent));
	return 1;
    },
    inline_rollback(),
    inline_case(sub {
        _add_rides(1, 4);
	_add_rides(4, 4);
	return;
    }),
    [{
	'FreikerCode.freiker_code' => _fc(4),
	'Club.club_id' => $school_id,
    }] => sub {
	assert_equals($num_rides + 1, _count());
	return 1;
    },
    error_case({
	'FreikerCode.freiker_code' => _fc(0),
	'Club.club_id' => $school_id,
	super_user_override => 1,
    } => {
	'FreikerCode.freiker_code' => 'EXISTS',
    }),
    inline_case(sub {
	req()->set_user('adm');
	model(AdmSubstituteUserForm => {login => 'parent'});
	return;
    }),
    error_case({
	'FreikerCode.freiker_code' => _fc(0),
	'Club.club_id' => $school_id,
    } => {
	'FreikerCode.freiker_code' => 'EXISTS',
    }),
    inline_case(sub {
	unauth_model(Ride => {
	    user_id => $child_id,
	    ride_date => $day->[2],
	})->update({
	    ride_upload_id => undef,
	});
	return;
    }),
    [{
	'FreikerCode.freiker_code' => _fc(0),
	'Club.club_id' => $school_id,
	super_user_override => 1,
    }] => sub {
	assert_equals(100, _count());
	return 1;
    },
];
