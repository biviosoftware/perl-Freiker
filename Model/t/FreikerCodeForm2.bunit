# Copyright (c) 2009-2010 bivio Software, Inc.  All Rights Reserved.
# $Id$
my($today, $child_id, $school_id) = do('./RideList.PL');
my($_D) = class('Type.Date');
my($day) = [map($_D->add_days($today, -$_), 0..10)];
my($fc) = sub {
    return class('Freiker::Test')->FREIKER_CODE(@_);
};
my($epc) = sub {
    return class('Freiker::Test')->EPC(@_);
};
my($count) = sub {
    return req()->with_realm(
	$child_id,
	sub {scalar(@{model('Ride')->map_iterate(sub {1}, 'ride_date')})},
    );
};
[
    [{
	'User.gender' => Freiker::Test->DEFAULT_GENDER,
	birth_year => Freiker::Test->DEFAULT_BIRTH_YEAR,
	'User.first_name' => unauth_model('User', {user_id => $child_id})
	    ->get('first_name'),
	'FreikerCode.freiker_code' => $fc->(3, 1),
	'Club.club_id' => realm_id(Freiker::Test->SCHOOL_NAME(1)),
	'Address.zip' => Freiker::Test->ZIP(1),
	miles => 33,
    }] => sub {
	assert_equals(1, $count->(), 'count');
	my($found) = 0;
	req()->with_realm(Freiker::Test->SCHOOL_NAME(0), sub {
	    model('ClubFreikerList')->load_all->do_rows(
		sub {
		    my($n, $c)
			= shift->get(qw(RealmOwner.display_name ride_count));
		    if ($n =~ /^child1 \(\d+/) {
			assert_equals(2, $c);
			$found++;
		    }
		    return 1
		},
	    );
	});
	assert_equals(1, $found, 'found');
	return 1;
    },
];
